import java.util.*;

// Binary Tree Node
class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        left = right = null;
    }
}

// Class to store node and its horizontal distance
class Pair {
    Node node;
    int hd;  // horizontal distance from root

    Pair(Node node, int hd) {
        this.node = node;
        this.hd = hd;
    }
}

public class BinaryTree {

    public static void topView(Node root) {
        if (root == null) return;

        // Map to store first node at each horizontal distance
        Map<Integer, Integer> topViewMap = new TreeMap<>();

        // Queue for level order traversal
        Queue<Pair> queue = new LinkedList<>();

        // Start with root at horizontal distance 0
        queue.add(new Pair(root, 0));

        int minHd = 0, maxHd = 0;

        while (!queue.isEmpty()) {
            Pair current = queue.poll();
            Node currNode = current.node;
            int hd = current.hd;

            // Store node in map only if it's the first node at that hd
            if (!topViewMap.containsKey(hd)) {
                topViewMap.put(hd, currNode.data);
            }

            // Track min and max horizontal distance
            minHd = Math.min(minHd, hd);
            maxHd = Math.max(maxHd, hd);

            // Add left and right children to queue with updated hd
            if (currNode.left != null) {
                queue.add(new Pair(currNode.left, hd - 1));
            }
            if (currNode.right != null) {
                queue.add(new Pair(currNode.right, hd + 1));
            }
        }

        // Print top view from min to max hd
        System.out.println("Top view of the tree:");
        for (int i = minHd; i <= maxHd; i++) {
            System.out.print(topViewMap.get(i) + " ");
        }
    }

    public static void main(String[] args) {
        // Sample Tree:
        //        1
        //      /   \
        //     2     3
        //    / \   / \
        //   4   5 6   7
        //        \
        //         8

        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        root.left.right.right = new Node(8);

        topView(root); // Expected output: 4 2 1 3 7
    }
}




Level Order Traversal (BFS) is used to visit nodes level by level.

A horizontal distance (HD) is maintained for each node:

Root node has HD = 0

Left child has HD = parent HD - 1

Right child has HD = parent HD + 1

Use a map (TreeMap or HashMap) to store the first node encountered at each HD.
